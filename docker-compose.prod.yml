version: '3.8'

services:
  # PostgreSQL 17 Database
  postgres:
    image: postgres:17-alpine
    container_name: ocr_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-ocr_identity_db_prod}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5434}:5432"  # Different port for production
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ocr_network_prod
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-ocr_identity_db_prod}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ocr_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6381}:6379"  # Different port for production
    volumes:
      - redis_data_prod:/data
    networks:
      - ocr_network_prod
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # MinIO Object Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: ocr_minio_prod
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "${MINIO_API_PORT:-9004}:9000"  # Different port for production
      - "${MINIO_CONSOLE_PORT:-9005}:9001"  # Different port for production
    volumes:
      - minio_data_prod:/data
    networks:
      - ocr_network_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Production Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ocr_app_prod
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8002}:8000"  # Different port for production
    environment:
      - PYTHONUNBUFFERED=1
      - APP_PORT=${APP_PORT:-8002}
      - ENVIRONMENT=production
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-ocr_identity_db_prod}
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      # MinIO (S3)
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-ocr-identity-bucket-prod}
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_USE_SSL=false
      - S3_VERIFY_SSL=false
      # Email (Production SMTP)
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT:-587}
      - EMAIL_USERNAME=${EMAIL_USERNAME}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-true}
      - EMAIL_USE_SSL=${EMAIL_USE_SSL:-false}
      # App settings
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - ocr_network_prod
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      replicas: 2
    profiles:
      - prod

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ocr_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - ocr_network_prod
    profiles:
      - prod
      - nginx

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  minio_data_prod:
    driver: local

networks:
  ocr_network_prod:
    driver: bridge 