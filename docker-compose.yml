services:
  # PostgreSQL 17 Database
  postgres:
    image: postgres:17-alpine
    container_name: ocr_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-ocr_identity_db}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - ocr_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-ocr_identity_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ocr_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ocr_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: ocr_minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    networks:
      - ocr_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Mailpit (Email Testing)
  mailpit:
    image: axllent/mailpit:latest
    container_name: ocr_mailpit
    restart: unless-stopped
    ports:
      - "${MAILPIT_SMTP_PORT:-1025}:1025"
      - "${MAILPIT_UI_PORT:-8025}:8025"
    networks:
      - ocr_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8025"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application
  app:
    build: .
    container_name: ocr_app
    restart: unless-stopped
    ports:
      - "${APP_PORT:-8000}:${APP_PORT:-8000}"
      - "5678:5678"  # Debug port
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      - UVICORN_RELOAD=1
      - DEBUG_IP=${DEBUG_IP:-0.0.0.0}
      - APP_PORT=${APP_PORT:-8000}
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-ocr_identity_db}
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      # MinIO (S3)
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-ocr-identity-bucket}
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_USE_SSL=false
      - S3_VERIFY_SSL=false
      # Email (Mailpit)
      - EMAIL_SMTP_HOST=mailpit
      - EMAIL_SMTP_PORT=1025
      - EMAIL_USERNAME=${EMAIL_USERNAME:-test@example.com}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD:-}
      - EMAIL_FROM=${EMAIL_FROM:-test@example.com}
      - EMAIL_USE_TLS=false
      - EMAIL_USE_SSL=false
      # App settings
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      mailpit:
        condition: service_healthy
    networks:
      - ocr_network

  # Celery Worker for OCR Processing
  celery_worker_ocr:
    build: .
    container_name: ocr_celery_worker_ocr
    restart: unless-stopped
    command: python scripts/start_celery_worker.py --worker --queue ocr --concurrency 2
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-ocr_identity_db}
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      # MinIO (S3)
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-ocr-identity-bucket}
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_USE_SSL=false
      - S3_VERIFY_SSL=false
      # App settings
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - ocr_network

  # Celery Worker for Media Processing
  celery_worker_media:
    build: .
    container_name: ocr_celery_worker_media
    restart: unless-stopped
    command: python scripts/start_celery_worker.py --worker --queue media --concurrency 4
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-ocr_identity_db}
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      # MinIO (S3)
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-ocr-identity-bucket}
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_USE_SSL=false
      - S3_VERIFY_SSL=false
      # App settings
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - ocr_network

  # Celery Beat Scheduler
  celery_beat:
    build: .
    container_name: ocr_celery_beat
    restart: unless-stopped
    command: python scripts/start_celery_worker.py --beat
    volumes:
      - .:/app
    environment:
      - PYTHONUNBUFFERED=1
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-ocr_identity_db}
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      # MinIO (S3)
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-ocr-identity-bucket}
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_USE_SSL=false
      - S3_VERIFY_SSL=false
      # App settings
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - ocr_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  ocr_network:
    driver: bridge
