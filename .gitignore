# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files:
#  .idea/
#  *.iml
#  *.ipr
#  *.iws
.idea/
*.iml
*.ipr
*.iws

# VS Code
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Windows
Thumbs.db
Thumbs.db:encryptable
ehthumbs.db
ehthumbs_vista.db
*.tmp
*.temp
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# Application specific
# ===================

# Environment files
.env
.env.local
.env.development
.env.staging
.env.production
.env.test
config.*.env

# Database files
*.db
*.sqlite
*.sqlite3
*.db-journal
*.db-wal
*.db-shm

# Log files
logs/
*.log
*.log.*
*.out
*.err

# Temporary files
tmp/
temp/
*.tmp
*.temp
*.bak
*.backup
*.old

# Upload files
uploads/
storage/
media/
files/
images/
documents/

# Cache files
.cache/
cache/
*.cache

# Node.js (if using any frontend tools)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm
.yarn-integrity

# Docker
.dockerignore
docker-compose.override.yml
docker-compose.*.yml
!docker-compose.yml
!docker-compose.dev.yml
!docker-compose.staging.yml
!docker-compose.prod.yml

# Docker volumes
docker-volumes/
volumes/

# Backup files
backups/
*.backup
*.bak
*.sql.bak

# Coverage reports
htmlcov/
.coverage
.coverage.*
coverage.xml
*.cover

# Test artifacts
.pytest_cache/
test-results/
test-reports/
junit.xml

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~
.project
.settings/
.classpath

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Application specific ignores
# ===========================

# OCR Identity REST API specific

# Database dumps
*.sql
*.dump
*.backup

# MinIO data
minio-data/
minio/

# Redis data
redis-data/
dump.rdb

# PostgreSQL data
postgres-data/
postgres/

# Mailpit data
mailpit-data/
mailpit/

# Application logs
app.log
error.log
access.log
debug.log

# Configuration overrides
config.local.py
settings.local.py

# Temporary uploads
temp_uploads/
temp_files/

# Generated documentation
docs/_build/
docs/build/

# API documentation
openapi.json
swagger.json

# SSL certificates
*.pem
*.key
*.crt
*.csr
*.p12
*.pfx

# Secrets and sensitive files
secrets/
secrets.json
secrets.yaml
secrets.yml
.secrets
.secrets.*

# Performance monitoring
*.prof
*.profile

# Memory dumps
*.dump
*.hprof

# Local development files
local/
dev/
development/

# Staging files
staging/

# Production files
production/

# Backup directories
backup/
backups/

# Archive files
*.tar
*.tar.gz
*.tar.bz2
*.zip
*.rar
*.7z

# Compressed files
*.gz
*.bz2
*.xz

# Binary files
*.exe
*.dll
*.so
*.dylib

# Compiled files
*.pyc
*.pyo
*.pyd

# Jupyter notebooks (if any)
.ipynb_checkpoints/

# Sphinx documentation
docs/_build/

# Pytest
.pytest_cache/
.pytest_cache/*

# Coverage
htmlcov/
.coverage
.coverage.*
coverage.xml
*.cover

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre
.pyre/

# pytype
.pytype/

# Cython
cython_debug/

# Virtual environments
venv/
env/
ENV/
.venv/
.env/

# Environment variables
.env
.env.local
.env.development
.env.staging
.env.production
.env.test

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
Thumbs.db

# Application specific
logs/
*.log
uploads/
temp/
cache/
backups/